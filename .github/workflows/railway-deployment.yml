name: Deploy to Railway

on:
  push:
    branches: [main]
    paths:
      - 'apps/**'
      - 'libs/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
  workflow_dispatch:
    inputs:
      deploy_api:
        description: 'Deploy API service'
        required: false
        type: boolean
        default: true
      deploy_web:
        description: 'Deploy Web application'
        required: false
        type: boolean
        default: true

concurrency:
  group: railway-deployment-${{ github.ref }}
  cancel-in-progress: true

env:
  PNPM_VERSION: '10.13.1'
  NODE_VERSION: '20'

jobs:
  # Detect changes to determine what to deploy
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      api-changed: ${{ steps.changes.outputs.api }}
      web-changed: ${{ steps.changes.outputs.web }}
      libs-changed: ${{ steps.changes.outputs.libs }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            api:
              - 'apps/api/**'
              - 'libs/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
            web:
              - 'apps/web/**'
              - 'libs/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
            libs:
              - 'libs/**'

  # Build and test before deployment
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.api-changed == 'true' || needs.detect-changes.outputs.web-changed == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build libraries
        run: pnpm run build:libs

      - name: Build API
        if: needs.detect-changes.outputs.api-changed == 'true' || inputs.deploy_api
        run: pnpm run build:api

      - name: Build Web
        if: needs.detect-changes.outputs.web-changed == 'true' || inputs.deploy_web
        run: pnpm run build:web

      - name: Test affected projects
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger - test all
            if [ "${{ inputs.deploy_api }}" = "true" ]; then
              pnpm nx test api || echo "API tests failed but continuing deployment"
            fi
            if [ "${{ inputs.deploy_web }}" = "true" ]; then
              pnpm nx test web || echo "Web tests failed but continuing deployment"
            fi
          else
            # Auto trigger - test affected only
            pnpm nx affected -t test --base=HEAD~1 || echo "Tests failed but continuing deployment"
          fi

  # Deploy API to Railway
  deploy-api:
    name: Deploy API to Railway
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-test]
    if: (needs.detect-changes.outputs.api-changed == 'true' || inputs.deploy_api) && always() && needs.build-and-test.result != 'failure'
    environment:
      name: railway-api
      url: https://${{ secrets.RAILWAY_API_DOMAIN }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Deploy API to Railway
        run: |
          cd apps/api
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway link ${{ secrets.RAILWAY_API_SERVICE_ID }}
          
          # Set environment variables
          railway variables set NODE_ENV=production
          railway variables set PORT=\$PORT
          railway variables set HOST=0.0.0.0
          railway variables set CORS_ORIGIN=https://${{ secrets.RAILWAY_WEB_DOMAIN }}
          
          # Optional: Set database URL if using Railway database
          if [ -n "${{ secrets.RAILWAY_DATABASE_URL }}" ]; then
            railway variables set DATABASE_URL="${{ secrets.RAILWAY_DATABASE_URL }}"
          fi
          
          # Deploy
          railway up --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Verify API deployment
        run: |
          echo "⏳ Waiting for API deployment to be ready..."
          sleep 30
          
          # Health check
          for i in {1..10}; do
            if curl -f https://${{ secrets.RAILWAY_API_DOMAIN }}/api/health; then
              echo "✅ API deployment successful!"
              exit 0
            fi
            echo "⏳ Attempt $i failed, retrying in 10s..."
            sleep 10
          done
          echo "❌ API deployment verification failed"
          exit 1

  # Deploy Web to Railway
  deploy-web:
    name: Deploy Web to Railway
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-test, deploy-api]
    if: (needs.detect-changes.outputs.web-changed == 'true' || inputs.deploy_web) && always() && needs.build-and-test.result != 'failure'
    environment:
      name: railway-web
      url: https://${{ secrets.RAILWAY_WEB_DOMAIN }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Deploy Web to Railway
        run: |
          cd apps/web
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway link ${{ secrets.RAILWAY_WEB_SERVICE_ID }}
          
          # Set environment variables for build
          railway variables set VITE_ENVIRONMENT=production
          railway variables set VITE_API_BASE_URL=https://${{ secrets.RAILWAY_API_DOMAIN }}
          
          # Deploy
          railway up --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Verify Web deployment
        run: |
          echo "⏳ Waiting for Web deployment to be ready..."
          sleep 30
          
          # Health check
          for i in {1..10}; do
            if curl -f https://${{ secrets.RAILWAY_WEB_DOMAIN }}/health; then
              echo "✅ Web deployment successful!"
              exit 0
            fi
            echo "⏳ Attempt $i failed, retrying in 10s..."
            sleep 10
          done
          echo "❌ Web deployment verification failed"
          exit 1

  # Deployment summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web]
    if: always()
    
    steps:
      - name: Create deployment summary
        run: |
          echo "## 🚀 Railway Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-api.result }}" = "success" ]; then
            echo "- ✅ **API**: Successfully deployed to https://${{ secrets.RAILWAY_API_DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-api.result }}" = "skipped" ]; then
            echo "- ⏭️ **API**: Skipped (no changes detected)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **API**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy-web.result }}" = "success" ]; then
            echo "- ✅ **Web**: Successfully deployed to https://${{ secrets.RAILWAY_WEB_DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-web.result }}" = "skipped" ]; then
            echo "- ⏭️ **Web**: Skipped (no changes detected)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **Web**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed at**: $(date)" >> $GITHUB_STEP_SUMMARY