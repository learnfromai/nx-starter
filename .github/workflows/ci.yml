name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NX_CLOUD_DISTRIBUTED_EXECUTION: false
  NX_REJECT_UNKNOWN_LOCAL_CACHE: 0

jobs:
  # Job to setup and cache dependencies
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.setup-node.outputs.node-version }}
      pnpm-version: ${{ steps.setup-pnpm.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install pnpm
        id: setup-pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '>=10.13.1'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/nx
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        check: [lint, typecheck, format-check]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/nx
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Run linting (affected)
        if: matrix.check == 'lint'
        run: pnpm run lint:affected

      - name: Run type checking (affected)
        if: matrix.check == 'typecheck'
        run: pnpm run typecheck

      - name: Check code formatting
        if: matrix.check == 'format-check'
        run: pnpm run format:check

  # Build all affected projects
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        target: [libs, apps, all]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/nx
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Build libraries
        if: matrix.target == 'libs'
        run: pnpm run build:libs

      - name: Build applications
        if: matrix.target == 'apps'
        run: pnpm run build

      - name: Build all projects (affected)
        if: matrix.target == 'all'
        run: pnpm run ci:affected

      - name: Upload build artifacts
        if: matrix.target == 'all'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            !dist/**/*.map
          retention-days: 7

  # Unit and integration tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        project: [domain-core, application-core, utils-core, starter-api, starter-pwa]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/nx
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Run tests with coverage
        run: pnpm nx test ${{ matrix.project }} --coverage --watchAll=false

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.project }}
          path: coverage/
          retention-days: 7

  # E2E tests
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    strategy:
      matrix:
        project: [starter-api-e2e, starter-pwa-e2e]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/nx
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Install Playwright browsers
        if: matrix.project == 'starter-pwa-e2e'
        run: pnpm exec playwright install --with-deps

      - name: Run E2E tests
        run: pnpm nx e2e ${{ matrix.project }}

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ matrix.project }}
          path: |
            apps/${{ matrix.project }}/test-results/
            apps/${{ matrix.project }}/playwright-report/
          retention-days: 7

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/nx
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Run security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: Run CodeQL analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3

  # Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [code-quality, build, test, e2e, security]
    if: always()
    steps:
      - name: Check all jobs success
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "Some CI jobs failed"
            exit 1
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "Some CI jobs were cancelled"
            exit 1
          else
            echo "All CI jobs succeeded"
          fi