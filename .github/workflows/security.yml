name: Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '>=10.13.1'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run pnpm audit
        run: |
          echo "## Dependency Audit Results" >> $GITHUB_STEP_SUMMARY
          pnpm audit --audit-level moderate --json > audit-results.json || true
          
          # Check if there are any vulnerabilities
          if [ -s audit-results.json ]; then
            echo "⚠️ Vulnerabilities found in dependencies" >> $GITHUB_STEP_SUMMARY
            echo "Please review and update affected packages" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No vulnerabilities found in dependencies" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-audit-results
          path: audit-results.json
          retention-days: 30

  # Static code analysis with CodeQL
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [typescript, javascript]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '>=10.13.1'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project for analysis
        run: pnpm run build:libs

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: /language:${{ matrix.language }}

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

      - name: Run TruffleHog scan
        run: |
          echo "## Secret Scanning Results" >> $GITHUB_STEP_SUMMARY
          trufflehog git file://. --json --no-update > trufflehog-results.json || true
          
          # Check if secrets were found
          if [ -s trufflehog-results.json ]; then
            echo "⚠️ Potential secrets found in repository" >> $GITHUB_STEP_SUMMARY
            echo "Please review and remove any exposed secrets" >> $GITHUB_STEP_SUMMARY
            # Don't fail the build, but warn
            cat trufflehog-results.json | jq -r '.SourceMetadata.Data.Git.file' | sort -u >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No secrets found in repository" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload secret scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan-results
          path: trufflehog-results.json
          retention-days: 30

  # Docker image security scanning
  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    strategy:
      matrix:
        app: [starter-api, starter-pwa]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.app }}/Dockerfile
          tags: ${{ matrix.app }}:scan
          load: true
          cache-from: type=gha
          build-args: |
            APP_NAME=${{ matrix.app }}

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Run Trivy vulnerability scanner
        run: |
          echo "## Docker Security Scan Results - ${{ matrix.app }}" >> $GITHUB_STEP_SUMMARY
          trivy image --format json --output trivy-results-${{ matrix.app }}.json ${{ matrix.app }}:scan || true
          
          # Check results and create summary
          if [ -s trivy-results-${{ matrix.app }}.json ]; then
            HIGH_VULNS=$(cat trivy-results-${{ matrix.app }}.json | jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH") | .VulnerabilityID' | wc -l)
            CRITICAL_VULNS=$(cat trivy-results-${{ matrix.app }}.json | jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | .VulnerabilityID' | wc -l)
            
            echo "- **Critical vulnerabilities**: $CRITICAL_VULNS" >> $GITHUB_STEP_SUMMARY
            echo "- **High vulnerabilities**: $HIGH_VULNS" >> $GITHUB_STEP_SUMMARY
            
            if [ "$CRITICAL_VULNS" -gt 0 ]; then
              echo "❌ Critical vulnerabilities found in ${{ matrix.app }} image" >> $GITHUB_STEP_SUMMARY
            elif [ "$HIGH_VULNS" -gt 0 ]; then
              echo "⚠️ High vulnerabilities found in ${{ matrix.app }} image" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ No critical or high vulnerabilities found in ${{ matrix.app }} image" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Upload Trivy scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-security-scan-${{ matrix.app }}
          path: trivy-results-${{ matrix.app }}.json
          retention-days: 30

  # License compliance scanning
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '>=10.13.1'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install license checker
        run: npm install -g license-checker

      - name: Run license check
        run: |
          echo "## License Compliance Results" >> $GITHUB_STEP_SUMMARY
          license-checker --json --out license-results.json --excludePrivatePackages || true
          
          # Check for problematic licenses
          PROBLEMATIC_LICENSES="GPL-2.0|GPL-3.0|AGPL-1.0|AGPL-3.0|LGPL-2.0|LGPL-2.1|LGPL-3.0"
          
          if grep -E "$PROBLEMATIC_LICENSES" license-results.json > /dev/null; then
            echo "⚠️ Potentially problematic licenses found" >> $GITHUB_STEP_SUMMARY
            echo "Please review the following licenses:" >> $GITHUB_STEP_SUMMARY
            grep -E "$PROBLEMATIC_LICENSES" license-results.json | head -5 >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No problematic licenses found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload license results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: license-compliance-results
          path: license-results.json
          retention-days: 30

  # Security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql-analysis, secret-scan, license-scan]
    if: always()
    steps:
      - name: Create security summary
        run: |
          echo "# 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scan | ${{ needs.secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Compliance | ${{ needs.license-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan completed at**: $(date -u)" >> $GITHUB_STEP_SUMMARY

      - name: Check overall security status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "Some security scans failed - please review the results"
            exit 1
          else
            echo "All security scans completed successfully"
          fi