name: Deploy to Railway

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual triggering
    inputs:
      deploy_api:
        description: 'Deploy API service'
        required: false
        type: boolean
        default: true
      deploy_web:
        description: 'Deploy Web application'
        required: false
        type: boolean
        default: true

# Allow only one concurrent Railway deployment
concurrency:
  group: railway-deployment
  cancel-in-progress: false

env:
  PNPM_VERSION: '10.13.1'
  NODE_VERSION: '20'

jobs:
  # Job 1: Pre-deployment checks and build
  pre-deployment:
    name: Pre-deployment Checks & Build
    runs-on: ubuntu-latest
    outputs:
      deploy-api: ${{ steps.changes.outputs.api || inputs.deploy_api || 'true' }}
      deploy-web: ${{ steps.changes.outputs.web || inputs.deploy_web || 'true' }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Detect changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # For push events, check what files changed
            if git diff --name-only HEAD~1 HEAD | grep -E "^apps/api|^libs/(domain|application-api|application-shared|utils-core)" > /dev/null; then
              echo "api=true" >> $GITHUB_OUTPUT
            else
              echo "api=false" >> $GITHUB_OUTPUT
            fi
            
            if git diff --name-only HEAD~1 HEAD | grep -E "^apps/web|^libs/(domain|application-web|application-shared|utils-core)" > /dev/null; then
              echo "web=true" >> $GITHUB_OUTPUT
            else
              echo "web=false" >> $GITHUB_OUTPUT
            fi
          else
            # For manual triggers, use input values
            echo "api=${{ inputs.deploy_api || 'true' }}" >> $GITHUB_OUTPUT
            echo "web=${{ inputs.deploy_web || 'true' }}" >> $GITHUB_OUTPUT
          fi

      - name: Run tests
        run: pnpm run test

      - name: Build applications
        run: pnpm run build:prod

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: railway-build-artifacts
          path: |
            dist/
            apps/api/railway.json
            apps/web/railway.json
          retention-days: 7

  # Job 2: Deploy API to Railway
  deploy-api:
    name: Deploy API to Railway
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.deploy-api == 'true'
    environment:
      name: railway-api
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: railway-build-artifacts
          path: .

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Deploy API to Railway
        id: deploy
        run: |
          cd apps/api
          
          # Deploy to Railway
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          
          # Connect to Railway project/service
          railway link ${{ secrets.RAILWAY_API_PROJECT_ID }}
          
          # Set environment variables
          railway variables set \
            NODE_ENV=production \
            ENVIRONMENT=production \
            HOST=0.0.0.0 \
            API_PREFIX=/api \
            API_VERSION=v1 \
            JWT_SECRET=${{ secrets.JWT_SECRET }} \
            CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
          
          # Deploy the service
          railway up --detach
          
          # Get the deployment URL
          DEPLOY_URL=$(railway status --json | jq -r '.deployments[0].url')
          echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          echo "API deployed to: $DEPLOY_URL"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Health check API deployment
        run: |
          echo "Waiting for API deployment to be ready..."
          sleep 60
          
          # Health check
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if curl -f "${{ steps.deploy.outputs.url }}/api/v1/health" > /dev/null 2>&1; then
              echo "✅ API health check passed"
              break
            else
              echo "⏳ Attempt $attempt/$max_attempts failed, retrying in 30s..."
              sleep 30
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ API health check failed after $max_attempts attempts"
            exit 1
          fi

  # Job 3: Deploy Web to Railway
  deploy-web:
    name: Deploy Web to Railway
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-api]
    if: needs.pre-deployment.outputs.deploy-web == 'true' && (success() || !needs.pre-deployment.outputs.deploy-api)
    environment:
      name: railway-web
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: railway-build-artifacts
          path: .

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Deploy Web to Railway
        id: deploy
        run: |
          cd apps/web
          
          # Deploy to Railway
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          
          # Connect to Railway project/service
          railway link ${{ secrets.RAILWAY_WEB_PROJECT_ID }}
          
          # Set environment variables
          railway variables set \
            VITE_ENVIRONMENT=production \
            VITE_USE_API_BACKEND=true \
            VITE_API_BASE_URL=${{ needs.deploy-api.outputs.url || secrets.API_BASE_URL }}
          
          # Deploy the service
          railway up --detach
          
          # Get the deployment URL
          DEPLOY_URL=$(railway status --json | jq -r '.deployments[0].url')
          echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          echo "Web deployed to: $DEPLOY_URL"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Health check Web deployment
        run: |
          echo "Waiting for Web deployment to be ready..."
          sleep 30
          
          # Health check
          max_attempts=5
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if curl -f "${{ steps.deploy.outputs.url }}" > /dev/null 2>&1; then
              echo "✅ Web health check passed"
              break
            else
              echo "⏳ Attempt $attempt/$max_attempts failed, retrying in 20s..."
              sleep 20
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Web health check failed after $max_attempts attempts"
            exit 1
          fi

  # Job 4: Post-deployment summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-api, deploy-web]
    if: always()
    
    steps:
      - name: Create deployment summary
        run: |
          echo "## 🚀 Railway Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-api.result }}" = "success" ]; then
            echo "### ✅ API Deployment" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: Success" >> $GITHUB_STEP_SUMMARY
            echo "- **URL**: ${{ needs.deploy-api.outputs.url }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Health**: /api/v1/health" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.pre-deployment.outputs.deploy-api }}" = "true" ]; then
            echo "### ❌ API Deployment" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⏭️ API Deployment" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: Skipped (no changes detected)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-web.result }}" = "success" ]; then
            echo "### ✅ Web Deployment" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: Success" >> $GITHUB_STEP_SUMMARY
            echo "- **URL**: ${{ needs.deploy-web.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.pre-deployment.outputs.deploy-web }}" = "true" ]; then
            echo "### ❌ Web Deployment" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⏭️ Web Deployment" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: Skipped (no changes detected)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed at**: $(date)" >> $GITHUB_STEP_SUMMARY