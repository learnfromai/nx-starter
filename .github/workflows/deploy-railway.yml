name: Deploy to Railway

on:
  push:
    branches: [main]
    paths:
      - 'apps/api/**'
      - 'apps/web/**'
      - 'libs/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
  workflow_dispatch:
    inputs:
      deploy_api:
        description: 'Deploy API service'
        required: false
        type: boolean
        default: true
      deploy_web:
        description: 'Deploy web application'
        required: false
        type: boolean
        default: true

# Allow only one concurrent Railway deployment
concurrency:
  group: railway-deployment
  cancel-in-progress: true

env:
  PNPM_VERSION: '10.13.1'
  NODE_VERSION: '20'

jobs:
  # Detect which services need deployment
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      api-changed: ${{ steps.changes.outputs.api }}
      web-changed: ${{ steps.changes.outputs.web }}
      libs-changed: ${{ steps.changes.outputs.libs }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            api:
              - 'apps/api/**'
              - 'libs/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
            web:
              - 'apps/web/**'
              - 'libs/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
            libs:
              - 'libs/**'

  # Build and validate before deployment
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.api-changed == 'true' || needs.detect-changes.outputs.web-changed == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint affected projects
        run: pnpm nx affected -t lint --base=HEAD~1

      - name: Test affected projects
        run: pnpm nx affected -t test --base=HEAD~1

      - name: Build API (if changed)
        if: needs.detect-changes.outputs.api-changed == 'true' || inputs.deploy_api
        run: pnpm run build:api

      - name: Build Web (if changed)
        if: needs.detect-changes.outputs.web-changed == 'true' || inputs.deploy_web
        run: pnpm run build:web

      - name: Verify API build
        if: needs.detect-changes.outputs.api-changed == 'true' || inputs.deploy_api
        run: |
          test -f dist/apps/api/main.js || { echo "API build failed"; exit 1; }
          test -f dist/apps/api/package.json || { echo "API package.json missing"; exit 1; }

      - name: Verify Web build
        if: needs.detect-changes.outputs.web-changed == 'true' || inputs.deploy_web
        run: |
          test -f dist/apps/web/index.html || { echo "Web build failed"; exit 1; }
          test -d dist/apps/web/assets || { echo "Web assets missing"; exit 1; }

  # Deploy API to Railway
  deploy-api:
    name: Deploy API to Railway
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-test]
    if: (needs.detect-changes.outputs.api-changed == 'true' || inputs.deploy_api) && success()
    environment: 
      name: railway-api
      url: ${{ vars.RAILWAY_API_URL || 'https://api.railway.app' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Deploy API to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          echo "üöÄ Deploying API service to Railway..."
          
          # Set the project context if specified
          if [ -n "${{ vars.RAILWAY_PROJECT_ID }}" ]; then
            railway link ${{ vars.RAILWAY_PROJECT_ID }}
          fi
          
          # Deploy the API service
          if [ -n "${{ vars.RAILWAY_API_SERVICE_ID }}" ]; then
            railway deploy --service=${{ vars.RAILWAY_API_SERVICE_ID }}
          else
            railway deploy
          fi
          
          echo "‚úÖ API deployment completed"

      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to be ready..."
          sleep 30

      - name: Health check
        run: |
          echo "üîç Performing health check..."
          
          # Get the service URL
          API_URL="${{ vars.RAILWAY_API_URL || secrets.RAILWAY_API_URL }}"
          if [ -z "$API_URL" ]; then
            echo "‚ö†Ô∏è Warning: No API URL configured, skipping health check"
            exit 0
          fi
          
          # Perform health check
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -f "$API_URL/api/health" > /dev/null 2>&1; then
              echo "‚úÖ API health check passed"
              exit 0
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "‚ùå Health check failed (attempt $RETRY_COUNT/$MAX_RETRIES)"
            
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "‚è≥ Waiting 10 seconds before retry..."
              sleep 10
            fi
          done
          
          echo "‚ùå API health check failed after $MAX_RETRIES attempts"
          exit 1

  # Deploy Web to Railway
  deploy-web:
    name: Deploy Web to Railway
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-test]
    if: (needs.detect-changes.outputs.web-changed == 'true' || inputs.deploy_web) && success()
    environment: 
      name: railway-web
      url: ${{ vars.RAILWAY_WEB_URL || 'https://web.railway.app' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Deploy Web to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          echo "üåê Deploying web application to Railway..."
          
          # Set the project context if specified
          if [ -n "${{ vars.RAILWAY_PROJECT_ID }}" ]; then
            railway link ${{ vars.RAILWAY_PROJECT_ID }}
          fi
          
          # Deploy the web service
          if [ -n "${{ vars.RAILWAY_WEB_SERVICE_ID }}" ]; then
            railway deploy --service=${{ vars.RAILWAY_WEB_SERVICE_ID }}
          else
            railway deploy
          fi
          
          echo "‚úÖ Web deployment completed"

      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to be ready..."
          sleep 30

      - name: Health check
        run: |
          echo "üîç Performing health check..."
          
          # Get the service URL
          WEB_URL="${{ vars.RAILWAY_WEB_URL || secrets.RAILWAY_WEB_URL }}"
          if [ -z "$WEB_URL" ]; then
            echo "‚ö†Ô∏è Warning: No web URL configured, skipping health check"
            exit 0
          fi
          
          # Perform health check
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -f "$WEB_URL" > /dev/null 2>&1; then
              echo "‚úÖ Web health check passed"
              exit 0
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "‚ùå Health check failed (attempt $RETRY_COUNT/$MAX_RETRIES)"
            
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "‚è≥ Waiting 10 seconds before retry..."
              sleep 10
            fi
          done
          
          echo "‚ùå Web health check failed after $MAX_RETRIES attempts"
          exit 1

  # Post-deployment notifications and summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-api, deploy-web]
    if: always() && (needs.detect-changes.outputs.api-changed == 'true' || needs.detect-changes.outputs.web-changed == 'true' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Create deployment summary
        run: |
          echo "## üöÄ Railway Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # API deployment status
          if [ "${{ needs.deploy-api.result }}" = "success" ]; then
            echo "- ‚úÖ **API Service**: Successfully deployed" >> $GITHUB_STEP_SUMMARY
            if [ -n "${{ vars.RAILWAY_API_URL }}" ]; then
              echo "  - üåê URL: ${{ vars.RAILWAY_API_URL }}" >> $GITHUB_STEP_SUMMARY
              echo "  - üîç Health: ${{ vars.RAILWAY_API_URL }}/api/health" >> $GITHUB_STEP_SUMMARY
            fi
          elif [ "${{ needs.deploy-api.result }}" = "failure" ]; then
            echo "- ‚ùå **API Service**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-api.result }}" = "skipped" ]; then
            echo "- ‚è≠Ô∏è **API Service**: Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Web deployment status
          if [ "${{ needs.deploy-web.result }}" = "success" ]; then
            echo "- ‚úÖ **Web Application**: Successfully deployed" >> $GITHUB_STEP_SUMMARY
            if [ -n "${{ vars.RAILWAY_WEB_URL }}" ]; then
              echo "  - üåê URL: ${{ vars.RAILWAY_WEB_URL }}" >> $GITHUB_STEP_SUMMARY
            fi
          elif [ "${{ needs.deploy-web.result }}" = "failure" ]; then
            echo "- ‚ùå **Web Application**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-web.result }}" = "skipped" ]; then
            echo "- ‚è≠Ô∏è **Web Application**: Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: needs.deploy-api.result == 'failure' || needs.deploy-web.result == 'failure'
        run: |
          echo "‚ùå One or more deployments failed!"
          echo "Check the deployment logs and Railway dashboard for details."
          exit 1