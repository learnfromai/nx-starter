name: Deploy to Railway

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      service:
        description: 'Service to deploy'
        required: true
        default: 'both'
        type: choice
        options:
        - api
        - web
        - both

# Allow only one concurrent deployment per environment
concurrency:
  group: railway-deployment-${{ github.event.inputs.environment || 'auto' }}
  cancel-in-progress: false

env:
  PNPM_VERSION: '10.13.1'
  NODE_VERSION: '20'

jobs:
  determine-environment:
    name: Determine Deployment Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      service: ${{ steps.env.outputs.service }}
      should-deploy: ${{ steps.env.outputs.should-deploy }}
    
    steps:
      - name: Determine environment and service
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual deployment
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "service=${{ github.event.inputs.service }}" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Tag-based production deployment
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "service=both" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            # Auto staging deployment on main branch
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "service=both" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            # No deployment needed
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  deploy-to-railway:
    name: Deploy to Railway (${{ needs.determine-environment.outputs.environment }})
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.should-deploy == 'true'
    environment: 
      name: ${{ needs.determine-environment.outputs.environment }}
      url: ${{ steps.deploy.outputs.deployment-url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache NX cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-cache-railway-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}-${{ github.sha }}
          restore-keys: |
            nx-cache-railway-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}-

      - name: Run tests before deployment
        run: pnpm run test
        if: needs.determine-environment.outputs.environment == 'production'

      - name: Build libraries
        run: pnpm run build:libs

      - name: Build applications
        run: |
          if [ "${{ needs.determine-environment.outputs.service }}" = "api" ]; then
            pnpm run build:api
          elif [ "${{ needs.determine-environment.outputs.service }}" = "web" ]; then
            pnpm run build:web
          else
            pnpm run build:api
            pnpm run build:web
          fi

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy API to Railway
        if: needs.determine-environment.outputs.service == 'api' || needs.determine-environment.outputs.service == 'both'
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          cd apps/api
          
          # Set environment variables for Railway
          railway variables set NODE_ENV=${{ needs.determine-environment.outputs.environment }}
          railway variables set ENVIRONMENT=${{ needs.determine-environment.outputs.environment }}
          
          # Set production-specific variables
          if [ "${{ needs.determine-environment.outputs.environment }}" = "production" ]; then
            railway variables set JWT_SECRET="${{ secrets.JWT_SECRET_PROD }}"
            railway variables set APP_NAME="Nx Starter API"
          else
            railway variables set JWT_SECRET="${{ secrets.JWT_SECRET_STAGING }}"
            railway variables set APP_NAME="Nx Starter API (Staging)"
          fi
          
          # Deploy with Railway
          railway up --detach
          
          # Get deployment URL
          DEPLOYMENT_URL=$(railway status --json | jq -r '.deployments[0].url // "pending"')
          echo "API_DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV

      - name: Deploy Web to Railway
        if: needs.determine-environment.outputs.service == 'web' || needs.determine-environment.outputs.service == 'both'
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          cd apps/web
          
          # Deploy with Railway
          railway up --detach
          
          # Get deployment URL
          DEPLOYMENT_URL=$(railway status --json | jq -r '.deployments[0].url // "pending"')
          echo "WEB_DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV

      - name: Wait for deployments to be ready
        run: |
          echo "⏳ Waiting for deployments to be ready..."
          sleep 30

      - name: Run health checks
        id: health-check
        run: |
          echo "🔍 Running health checks..."
          
          # Check API health if deployed
          if [ "${{ needs.determine-environment.outputs.service }}" = "api" ] || [ "${{ needs.determine-environment.outputs.service }}" = "both" ]; then
            if [ -n "$API_DEPLOYMENT_URL" ] && [ "$API_DEPLOYMENT_URL" != "pending" ]; then
              echo "Checking API health: $API_DEPLOYMENT_URL/api/health"
              for i in {1..5}; do
                if curl -f "$API_DEPLOYMENT_URL/api/health" --max-time 30; then
                  echo "✅ API health check passed"
                  break
                elif [ $i -eq 5 ]; then
                  echo "❌ API health check failed after 5 attempts"
                  exit 1
                else
                  echo "⏳ API not ready, retrying in 10 seconds..."
                  sleep 10
                fi
              done
            fi
          fi
          
          # Check Web health if deployed
          if [ "${{ needs.determine-environment.outputs.service }}" = "web" ] || [ "${{ needs.determine-environment.outputs.service }}" = "both" ]; then
            if [ -n "$WEB_DEPLOYMENT_URL" ] && [ "$WEB_DEPLOYMENT_URL" != "pending" ]; then
              echo "Checking Web health: $WEB_DEPLOYMENT_URL"
              for i in {1..5}; do
                if curl -f "$WEB_DEPLOYMENT_URL" --max-time 30; then
                  echo "✅ Web health check passed"
                  break
                elif [ $i -eq 5 ]; then
                  echo "❌ Web health check failed after 5 attempts"
                  exit 1
                else
                  echo "⏳ Web not ready, retrying in 10 seconds..."
                  sleep 10
                fi
              done
            fi
          fi

      - name: Create deployment summary
        if: always()
        run: |
          echo "## 🚀 Railway Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: ${{ needs.determine-environment.outputs.service }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "$API_DEPLOYMENT_URL" ] && [ "$API_DEPLOYMENT_URL" != "pending" ]; then
            echo "### 🌐 API Service" >> $GITHUB_STEP_SUMMARY
            echo "- **URL**: $API_DEPLOYMENT_URL" >> $GITHUB_STEP_SUMMARY
            echo "- **Health Check**: $API_DEPLOYMENT_URL/api/health" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -n "$WEB_DEPLOYMENT_URL" ] && [ "$WEB_DEPLOYMENT_URL" != "pending" ]; then
            echo "### 🌐 Web Application" >> $GITHUB_STEP_SUMMARY
            echo "- **URL**: $WEB_DEPLOYMENT_URL" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "### ✅ Deployment Status: Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Deployment Status: Failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Set deployment URL output
        id: deploy
        run: |
          if [ -n "$WEB_DEPLOYMENT_URL" ] && [ "$WEB_DEPLOYMENT_URL" != "pending" ]; then
            echo "deployment-url=$WEB_DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          elif [ -n "$API_DEPLOYMENT_URL" ] && [ "$API_DEPLOYMENT_URL" != "pending" ]; then
            echo "deployment-url=$API_DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          else
            echo "deployment-url=pending" >> $GITHUB_OUTPUT
          fi