name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  NX_CLOUD_DISTRIBUTED_EXECUTION: false
  REGISTRY_URL: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Validate release
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should-release: ${{ steps.check.outputs.should-release }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Validate version format
        run: |
          if [[ ! "${{ steps.version.outputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format. Expected: v1.0.0"
            exit 1
          fi

      - name: Check if should release
        id: check
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "should-release=true" >> $GITHUB_OUTPUT
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
          fi

  # Build release artifacts
  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-release == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '>=10.13.1'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for production
        run: pnpm run build:prod

      - name: Run all tests
        run: pnpm run test:coverage

      - name: Create release archive
        run: |
          tar -czf nx-starter-${{ needs.validate.outputs.version }}.tar.gz \
            dist/ \
            package.json \
            pnpm-lock.yaml \
            README.md \
            --exclude=dist/**/*.map

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            nx-starter-${{ needs.validate.outputs.version }}.tar.gz
            dist/
          retention-days: 30

  # Build Docker images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [validate, build-release]
    if: needs.validate.outputs.should-release == 'true'
    strategy:
      matrix:
        app: [starter-api, starter-pwa]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}-${{ matrix.app }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_NAME=${{ matrix.app }}
            VERSION=${{ needs.validate.outputs.version }}

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build-release, build-docker]
    if: needs.validate.outputs.should-release == 'true'
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts

      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "## Changes since $PREVIOUS_TAG" > changelog.md
            git log --oneline --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> changelog.md
          else
            echo "## Initial Release" > changelog.md
            echo "First release of the nx-starter project." >> changelog.md
          fi

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          release_name: Release ${{ needs.validate.outputs.version }}
          body_path: changelog.md
          draft: false
          prerelease: ${{ contains(needs.validate.outputs.version, '-') }}

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./nx-starter-${{ needs.validate.outputs.version }}.tar.gz
          asset_name: nx-starter-${{ needs.validate.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  # Notify on completion
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: always() && needs.validate.outputs.should-release == 'true'
    steps:
      - name: Notify success
        if: needs.create-release.result == 'success'
        run: |
          echo "üéâ Release ${{ needs.validate.outputs.version }} created successfully!"
          echo "Docker images:"
          echo "- ghcr.io/${{ github.repository }}-starter-api:${{ needs.validate.outputs.version }}"
          echo "- ghcr.io/${{ github.repository }}-starter-pwa:${{ needs.validate.outputs.version }}"

      - name: Notify failure
        if: failure()
        run: |
          echo "‚ùå Release ${{ needs.validate.outputs.version }} failed!"
          exit 1